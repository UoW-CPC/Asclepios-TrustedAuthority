// Copyright (c) Open Enclave SDK contributors.
// Licensed under the MIT License.

enclave {
    from "openenclave/edl/sgx/platform.edl" import *;

    trusted {

        // Return the public key of this enclave along with the enclave's remote report.
        // Another enclave can use the remote report to attest the enclave and verify
        // the integrity of the public key.
        public int get_remote_report_with_pubkey(   [out] uint8_t **pem_key, 
                                                [out] size_t *key_size,
                                                [out] uint8_t **remote_report,
                                                [out] size_t  *remote_report_size);

        // Attest and store the public key of another enclave
        public int verify_report_and_set_pubkey(   [in, count=key_size] uint8_t *pem_key, 
                                                                  size_t key_size,
                                               [in, count=remote_report_size] uint8_t *remote_report,
                                               size_t   remote_report_size);

        public int seal_bytes([in, count=data_size] uint8_t* data,
                            size_t data_size,
                            [out] uint8_t** out,
                            [out] size_t *out_size);
        public int unseal_bytes([in, count=data_size] uint8_t* data,
                            size_t data_size,
                            [out] uint8_t** out,
                            [out] size_t *out_size);
        
        //public void retrieve_private_key([out] uint8_t**pem_key,[out] size_t* key_size); //test only

        public void initialize_encryptor( bool encrypt,
					  [in] unsigned char*key);
					  //[out] unsigned char** output_buf );
        
        public void encrypt_block(bool encrypt, 
                                        [in, count=size] unsigned char* input_buf, 
                                        [out] unsigned char** output_buf, 
                                        size_t size,
                                        [out] size_t *out_data_len);

        public void close_encryptor();
	public void test();
	};
    //untrusted {
    //    no untrusted functions in this sample
    //};
};


